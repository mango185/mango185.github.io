<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linux命令</title>
    <url>/post/82734d8.html</url>
    <content><![CDATA[<h1 id="linux常用命令："><a href="#linux常用命令：" class="headerlink" title="linux常用命令："></a>linux常用命令：</h1><h4 id="小技巧："><a href="#小技巧：" class="headerlink" title="小技巧："></a>小技巧：</h4><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">上下箭头可以选择历史的命令</span><br><span class="line"><span class="literal">tab</span>键可以自动补全文件名</span><br></pre></td></tr></table></figure>

<h3 id="1-pwd-查看当前所在位置"><a href="#1-pwd-查看当前所在位置" class="headerlink" title="1.pwd  查看当前所在位置"></a>1.pwd  查看当前所在位置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查看当前所在位置，显示的是绝对路径</span><br></pre></td></tr></table></figure>

<h3 id="2-ls-查询目录中的内容"><a href="#2-ls-查询目录中的内容" class="headerlink" title="2.ls  查询目录中的内容"></a>2.ls  查询目录中的内容</h3><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">颜色说明：</span><br><span class="line">    蓝色的为文件夹  白色为文件    </span><br><span class="line">    红色为压缩文件     绿色代表该文件拥有最高权限（777）</span><br><span class="line"></span><br><span class="line">ls 【选项】 【文件或者目录】</span><br><span class="line">    选项：</span><br><span class="line">        -<span class="ruby">a  显示所有文件，包括隐藏文件</span></span><br><span class="line"><span class="ruby">        -l  显示详细信息</span></span><br><span class="line"><span class="ruby">        -d  查看目录属性</span></span><br><span class="line"></span><br><span class="line"><span class="ruby">ll  以行形式查看文件详细内容，包括隐藏文件</span></span><br></pre></td></tr></table></figure>

<h3 id="3-ctrl-L-Ctrl-C（Ctrl-Z）"><a href="#3-ctrl-L-Ctrl-C（Ctrl-Z）" class="headerlink" title="3.ctrl+L  Ctrl+C（Ctrl+Z）"></a>3.ctrl+L  Ctrl+C（Ctrl+Z）</h3><figure class="highlight tp"><table><tr><td class="code"><pre><span class="line">ctrl+L    清屏</span><br><span class="line">Ctrl+C（Ctrl+<span class="keyword">Z</span>）   强制退出</span><br></pre></td></tr></table></figure>

<h3 id="4-cd-移动到某个位置"><a href="#4-cd-移动到某个位置" class="headerlink" title="4.cd 移动到某个位置"></a>4.cd 移动到某个位置</h3><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> 【选项】 【文件或者目录】</span><br><span class="line">    <span class="string">..</span>  返回到上一级目录</span><br><span class="line">    /   返回到根目录</span><br><span class="line"></span><br><span class="line">xxx 进入到xxx文件里</span><br><span class="line">    相对路径：参照当前所在目录进行查询</span><br><span class="line">    绝对路径：从根目录开始指定，一级一级的递归查找，在任何目录下都可以进入指定目录</span><br></pre></td></tr></table></figure>

<h3 id="5-date-查看当前服务器时间"><a href="#5-date-查看当前服务器时间" class="headerlink" title="5.date  查看当前服务器时间"></a>5.date  查看当前服务器时间</h3><h3 id="6-ifconfig-查看自己的ip地址"><a href="#6-ifconfig-查看自己的ip地址" class="headerlink" title="6.ifconfig  查看自己的ip地址"></a>6.ifconfig  查看自己的ip地址</h3><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">在DOS中使用 ipconfig查看自己的<span class="built_in">IP</span>地址</span><br></pre></td></tr></table></figure>

<h3 id="7-ping-检测网络连通"><a href="#7-ping-检测网络连通" class="headerlink" title="7.ping  检测网络连通"></a>7.ping  检测网络连通</h3><figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ping</span> 【主机名/域名】</span><br><span class="line">例如：<span class="built_in">ping</span>  www.baidu.com</span><br></pre></td></tr></table></figure>

<h3 id="8-mkdir创建目录-touch创建文件"><a href="#8-mkdir创建目录-touch创建文件" class="headerlink" title="8.mkdir创建目录   touch创建文件"></a>8.mkdir创建目录   touch创建文件</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span></span><br><span class="line">    创建单独目录（也可以创建多个目录，中间用空格隔开）</span><br><span class="line">    <span class="built_in">mkdir</span> 文件名</span><br><span class="line"></span><br><span class="line">touch</span><br><span class="line">    创建文件 （也可以创建多个文件，中间用空格隔开）</span><br><span class="line">    touch 文件名</span><br></pre></td></tr></table></figure>

<h3 id="9-rm-删除"><a href="#9-rm-删除" class="headerlink" title="9.rm 删除"></a>9.rm 删除</h3><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">rm</span> 【选项】 【文件】 （也可以删除多个文件，中间用空格隔开）</span><br><span class="line">    选项：</span><br><span class="line">        -r 删除目录 （也可以删除多个目录，中间用空格隔开）</span><br><span class="line">        -f 强制</span><br><span class="line"></span><br><span class="line"><span class="keyword">rmdir</span></span><br><span class="line">    删除空目录 （也可以删除多个目录，中间用空格隔开）</span><br><span class="line">    <span class="keyword">rmdir</span> 【目录名】</span><br><span class="line">    <span class="keyword">rm</span> -rf  【文件名】</span><br><span class="line">    强制删除文件夹或者目录 （也可以删除多个目录，中间用空格隔开）</span><br><span class="line">    《===禁术！慎重使用===》</span><br></pre></td></tr></table></figure>

<h3 id="10-cp-复制"><a href="#10-cp-复制" class="headerlink" title="10.cp  复制"></a>10.cp  复制</h3><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cp</span> 【原文件的目录】 【目标文件的目录】</span><br><span class="line"><span class="keyword">cp</span>   -r 【原文件夹的目录】 【目标文件的目录】</span><br></pre></td></tr></table></figure>

<h3 id="11-mv-剪切或者改名"><a href="#11-mv-剪切或者改名" class="headerlink" title="11.mv  剪切或者改名"></a>11.mv  剪切或者改名</h3><figure class="highlight cos"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mv</span> 【原文件目录】 【目标文件目录】</span><br><span class="line">注意：原文件目录和目标目录不在同一目录下为剪切，否则为改名</span><br></pre></td></tr></table></figure>

<h3 id="12-vim-编辑文件内容"><a href="#12-vim-编辑文件内容" class="headerlink" title="12.vim  编辑文件内容"></a>12.vim  编辑文件内容</h3><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">vim</span> 【文件名】</span><br><span class="line"><span class="keyword">vi</span>	【文件名】</span><br><span class="line">    输入i 进入到<span class="keyword">insert</span>状态，不想输入时按esc键退出编辑状态</span><br><span class="line">    输入：进入到命令页面，可以输入q! 不保存退出，wq! 保存并退出</span><br></pre></td></tr></table></figure>

<h3 id="13-cat-查看文件内容"><a href="#13-cat-查看文件内容" class="headerlink" title="13.cat  查看文件内容"></a>13.cat  查看文件内容</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">cat</span> <span class="string">【文件名】</span></span><br><span class="line"><span class="attr">more</span> <span class="string">【文件名】(文件内容篇幅较长时，可能显示不完整，按回车往下翻一行，按空格翻页）ctrl+z退出</span></span><br></pre></td></tr></table></figure>

<h3 id="14-chmod-赋权"><a href="#14-chmod-赋权" class="headerlink" title="14.chmod  赋权"></a>14.chmod  赋权</h3><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">chmod</span> 【赋权级别】 【文件名】</span><br><span class="line">    例如：<span class="keyword">chmod</span>  <span class="number">664</span>  a.txt</span><br><span class="line"></span><br><span class="line"><span class="keyword">chmod</span>  -R  <span class="number">777</span>  abc  (R要大写)</span><br><span class="line">    加R是递归，对该文件和其子文件统一赋权</span><br></pre></td></tr></table></figure>

<h3 id="15-netstat-查看当前端口号"><a href="#15-netstat-查看当前端口号" class="headerlink" title="15.netstat  查看当前端口号"></a>15.netstat  查看当前端口号</h3><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">netstat -<span class="keyword">an</span>   <span class="comment"> //查看当前所有的端口号</span></span><br><span class="line">netstat -ntlp  <span class="comment"> //查看当前所有tcp端口</span></span><br></pre></td></tr></table></figure>

<h3 id="16-ps-ef-查看进程号"><a href="#16-ps-ef-查看进程号" class="headerlink" title="16.ps -ef   查看进程号"></a>16.ps -ef   查看进程号</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">Pid：进程号</span><br><span class="line"></span><br><span class="line">Kill  <span class="number">-9</span> 进程号</span><br><span class="line">    强制杀死某个进程</span><br></pre></td></tr></table></figure>

<h3 id="17-su-切换为超级用户"><a href="#17-su-切换为超级用户" class="headerlink" title="17.su  切换为超级用户"></a>17.su  切换为超级用户</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="keyword">exit</span> 退出超级用户</span><br></pre></td></tr></table></figure>

<h3 id="18-Top-动态查看系统资源占有率"><a href="#18-Top-动态查看系统资源占有率" class="headerlink" title="18.Top  动态查看系统资源占有率"></a>18.Top  动态查看系统资源占有率</h3><h3 id="19-Find-根据文件名查找指定文件"><a href="#19-Find-根据文件名查找指定文件" class="headerlink" title="19.Find  根据文件名查找指定文件"></a>19.Find  根据文件名查找指定文件</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">Find</span> 【搜索目录】【搜索类型】 【搜索文件名】</span><br><span class="line">    例如：  <span class="builtin-name">Find</span>  /  -name  aaa</span><br></pre></td></tr></table></figure>

<h3 id="20-less-查看静态日志文件"><a href="#20-less-查看静态日志文件" class="headerlink" title="20.less  查看静态日志文件"></a>20.less  查看静态日志文件</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">less [文件名]</span><br><span class="line">    q    退出</span><br><span class="line">    /    搜索</span><br><span class="line">    空格 向下翻页</span><br><span class="line">   <span class="built_in"> Page </span>up  向上翻页</span><br><span class="line">   <span class="built_in"> Page </span>down 向下翻页</span><br><span class="line">    Enter  向下一行</span><br><span class="line">    y   向上一行</span><br></pre></td></tr></table></figure>

<h3 id="21-tail-查看动态日志文件"><a href="#21-tail-查看动态日志文件" class="headerlink" title="21.tail  查看动态日志文件"></a>21.tail  查看动态日志文件</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">tail <span class="number">-100f</span> [文件名] </span><br><span class="line">    <span class="number">100</span>指显示内容的行数，可以任意更改</span><br><span class="line">ctrl+z退出</span><br></pre></td></tr></table></figure>

<h3 id="22-grep-过滤"><a href="#22-grep-过滤" class="headerlink" title="22.grep  过滤"></a>22.grep  过滤</h3><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">一般<span class="keyword">grep</span>前面要加一个管道符“|”</span><br><span class="line">netstat -<span class="keyword">an</span> | <span class="keyword">grep</span> <span class="number">3306</span>   //查看所有<span class="number">3306</span>端口使用情况·</span><br><span class="line">tail  -<span class="number">100</span><span class="keyword">f</span>   <span class="keyword">abc</span>.txt | <span class="keyword">grep</span> xxx</span><br><span class="line">less  <span class="keyword">abc</span>.txt  |  <span class="keyword">grep</span> xxx</span><br></pre></td></tr></table></figure>

<h3 id="23、rz上传文件-sz下载文件"><a href="#23、rz上传文件-sz下载文件" class="headerlink" title="23、rz上传文件  sz下载文件"></a>23、rz上传文件  sz下载文件</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">rz</span> <span class="string">上传文件</span></span><br><span class="line"><span class="attr">sz</span> <span class="string">【文件名】  下载文件</span></span><br></pre></td></tr></table></figure>

<h3 id="24-zip-压缩文件"><a href="#24-zip-压缩文件" class="headerlink" title="24.zip  压缩文件"></a>24.zip  压缩文件</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">zip</span> 压缩文件名 源文件      备注：压缩文件</span><br><span class="line">    <span class="selector-tag">zip</span> <span class="selector-tag">-r</span> 压缩文件名  源目录  备注：压缩目录</span><br><span class="line">    <span class="selector-tag">unzip</span> 解压缩文件  备注：解压缩<span class="selector-class">.zip</span>文件</span><br><span class="line"><span class="selector-tag">tar</span></span><br><span class="line">    <span class="selector-tag">tar</span> <span class="selector-tag">-zcvf</span> 压缩包名<span class="selector-class">.tar</span><span class="selector-class">.gz</span> 源文件     备注：压缩为<span class="selector-tag">-tar</span><span class="selector-class">.gz</span>格式的文件</span><br><span class="line">    <span class="selector-tag">tar</span> <span class="selector-tag">-zxvf</span> 压缩包名<span class="selector-class">.tar</span><span class="selector-class">.gz</span>            备注：解压缩<span class="selector-tag">-tar</span><span class="selector-class">.gz</span>格式的文件</span><br></pre></td></tr></table></figure>

<h3 id="25-ln命令-在文件之间创建链接"><a href="#25-ln命令-在文件之间创建链接" class="headerlink" title="25.ln命令  在文件之间创建链接"></a>25.ln命令  在文件之间创建链接</h3><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">该命令在文件之间创建链接。这种操作实际上是给系统中已有的某个文件指定另外一个可用于访问它的名称。对于这个新的文件名，我们可以为之指定不同的访问权限，以控制对信息的共享和安全性的问题。</span><br><span class="line"></span><br><span class="line"><span class="built_in">ln</span>的链接分软链接和硬链接两种：</span><br><span class="line">    softlink   <span class="meta">#软连接</span></span><br><span class="line">    hardlink   <span class="meta">#硬连接</span></span><br><span class="line">    <span class="number">1</span>、软链接就是：“<span class="built_in">ln</span> –s 源文件 目标文件”，只会在选定的位置上生成一个文件的镜像，不会占用磁盘空间，类似与windows的快捷方式。</span><br><span class="line">    <span class="number">2</span>、硬链接<span class="built_in">ln</span>源文件目标文件，没有参数-s， 会在选定的位置上生成一个和源文件大小相同的文件，无论是软链接还是硬链接，文件都保持同步变化。</span><br><span class="line">    </span><br><span class="line"><span class="built_in">ln</span> –s 源文件 目标文件</span><br><span class="line"><span class="built_in">ln</span>   源文件 目标文件</span><br><span class="line"><span class="built_in">ln</span> -s / /home/sns</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>RobotFramework自动化环境搭建</title>
    <url>/post/9af7d3f8.html</url>
    <content><![CDATA[<h1 id="一、下载安装python最新版"><a href="#一、下载安装python最新版" class="headerlink" title="一、下载安装python最新版"></a>一、下载安装python最新版</h1><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">附上官网：</span><br><span class="line"><span class="symbol">    https:</span><span class="comment">//www.python.org/</span></span><br></pre></td></tr></table></figure>

<p>下载完成后，双击运行安装软件</p>
<p>勾选 Add Python 3.7 to PATH</p>
<p>然后点击 Install Now 选择默认安装位置即可</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">安装完成后，打开<span class="keyword">cmd</span><span class="bash">命令行，输入python，进行验证。出现python版本信息，证明安装成功，环境变量成功添加</span></span><br></pre></td></tr></table></figure>

<h1 id="二、使用pip命令进行后续安装"><a href="#二、使用pip命令进行后续安装" class="headerlink" title="二、使用pip命令进行后续安装"></a>二、使用pip命令进行后续安装</h1><p>打开cmd，依次输入：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="selector-class">.pip</span> install -<span class="selector-tag">i</span> https:<span class="comment">//pypi.douban.com/simple/ wxPython</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span><span class="selector-class">.pip</span> install -<span class="selector-tag">i</span> https:<span class="comment">//pypi.douban.com/simple/ robotframework </span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span><span class="selector-class">.pip</span> install -<span class="selector-tag">i</span> https:<span class="comment">//pypi.douban.com/simple/ robotframework-selenium2library</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span><span class="selector-class">.pip</span> install -<span class="selector-tag">i</span> https:<span class="comment">//pypi.douban.com/simple/ robotframework-ride</span></span><br></pre></td></tr></table></figure>

<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">ps</span>：使用豆瓣镜像依次安装</span><br><span class="line">    wxPython    Robot framework     robotframework-<span class="keyword">selenium2library </span>    RIDE</span><br></pre></td></tr></table></figure>

<p>双击Python37\Scripts路径下的ride.py文件，即可打开RIDE的运行界面<br>当然也可以通过使用命令 ride.py 打开</p>
]]></content>
      <tags>
        <tag>自动化测试</tag>
      </tags>
  </entry>
  <entry>
    <title>github/gitee/coding+hexo搭建部署个人博客</title>
    <url>/post/7d43abd0.html</url>
    <content><![CDATA[<h1 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h1><p>1、安装 node.js</p>
<pre><code>https://nodejs.org/en/    下载安装</code></pre><p>2、安装 git</p>
<pre><code>https://git-scm.com/    下载安装</code></pre><p>3、安装 Hexo</p>
<pre><code>执行安装命令 npm install -g hexo-cli</code></pre><h1 id="二、建站"><a href="#二、建站" class="headerlink" title="二、建站"></a>二、建站</h1><h2 id="1、创建存放博客的文件夹blog"><a href="#1、创建存放博客的文件夹blog" class="headerlink" title="1、创建存放博客的文件夹blog"></a>1、创建存放博客的文件夹blog</h2><h2 id="2、在该文件夹下，打开-git-bash"><a href="#2、在该文件夹下，打开-git-bash" class="headerlink" title="2、在该文件夹下，打开 git bash"></a>2、在该文件夹下，打开 git bash</h2><h2 id="3、初始化hexo，在该文件夹下新建所需文件"><a href="#3、初始化hexo，在该文件夹下新建所需文件" class="headerlink" title="3、初始化hexo，在该文件夹下新建所需文件"></a>3、初始化hexo，在该文件夹下新建所需文件</h2><pre><code>执行命令        hexo init
完成后，执行命令    npm install</code></pre><h2 id="4、创建一篇新文章"><a href="#4、创建一篇新文章" class="headerlink" title="4、创建一篇新文章"></a>4、创建一篇新文章</h2><pre><code>hexo new [layout] &lt;title&gt;
如果文章标题有空格，则需把整个标题用引号包起来

可以在命令中指定文章的布局（layout），默认为 post，可以通过修改 _config.yml 中的 default_layout 参数来指定默认布局</code></pre><h3 id="布局（Layout）"><a href="#布局（Layout）" class="headerlink" title="布局（Layout）"></a>布局（Layout）</h3><p>Hexo 有三种默认布局：post、page 和 draft，它们分别对应不同的路径，而自定义的其他布局和 post 相同，都将储存到 source/_posts 文件夹</p>
<pre><code>布局    路径
post    source/_posts
page    source
draft    source/_drafts</code></pre><h3 id="不要处理我的文章"><a href="#不要处理我的文章" class="headerlink" title="不要处理我的文章"></a>不要处理我的文章</h3><pre><code>如果你不想你的文章被处理，你可以将 Front-Matter 中的 layout: 设为 false</code></pre><h3 id="文件名称"><a href="#文件名称" class="headerlink" title="文件名称"></a>文件名称</h3><p>Hexo默认以标题做为文件名称, 但您可编辑 new_post_name 参数来改变默认的文件名称, 举例来说, 设为:</p>
<pre><code>year-:month-:day-:title.md 可让您更方便的通过日期来管理文章

变量    描述
:title    标题(小写, 空格将会被替换为短杠)
:year    建立的年份，比如 2020
:month    建立的月份（有前导零），比如， 04
:i_month    建立的月份（无前导零），比如， 4
:day    建立的日期（有前导零），比如， 07
:i_day    建立的日期（无前导零），比如， 7</code></pre><h3 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h3><p>刚刚提到了 Hexo 的一种特殊布局：draft，这种布局在建立时会被保存到 source/_drafts 文件夹，您可通过 publish 命令将草稿移动到 source/_posts 文件夹，该命令的使用方式与 new 十分类似，您也可在命令中指定 layout 来指定布局</p>
<pre><code>hexo publish [layout] &lt;title&gt;</code></pre><p>草稿默认不会显示在页面中，您可在执行时加上 –draft 参数，或是把 render_drafts 参数设为 true 来预览草稿</p>
<h3 id="模版（Scaffold）"><a href="#模版（Scaffold）" class="headerlink" title="模版（Scaffold）"></a>模版（Scaffold）</h3><p>在新建文章时，Hexo 会根据 scaffolds 文件夹内相对应的文件来建立文件，例如：</p>
<pre><code>hexo new photo &quot;My Gallery&quot;</code></pre><p>在执行这行指令时，Hexo 会尝试在 scaffolds 文件夹中寻找 photo.md，并根据其内容建立文章，以下是您可以在模版中使用的变量：</p>
<pre><code>变量    描述
layout    布局
title    标题
date    文件建立日期</code></pre><h3 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h3><p>Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量，举例来说：</p>
<pre><code>title: Hello World
date: 2013/7/13 20:46:25
---</code></pre><p>以下是预先定义的参数，您可在模板中使用这些参数值并加以利用</p>
<pre><code>参数        描述            默认值
layout        布局    
title        标题    
date        建立日期        文件建立日期
updated        更新日期        文件更新日期
comments    开启文章的评论功能    true
tags        标签（不适用于分页）    
categories    分类（不适用于分页）    
permalink    覆盖文章网址</code></pre><h3 id="分类和标签"><a href="#分类和标签" class="headerlink" title="分类和标签"></a>分类和标签</h3><p>只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 Foo, Bar 不等于 Bar, Foo；而标签没有顺序和层次</p>
<pre><code>categories:
- Diary
tags:
- PS3
- Games</code></pre><h4 id="分类方法的分歧"><a href="#分类方法的分歧" class="headerlink" title="分类方法的分歧"></a>分类方法的分歧</h4><p>如果有过使用WordPress的经验，就很容易误解Hexo的分类方式。WordPress支持对一篇文章设置多个分类，而且这些分类可以是同级的，也可以是父子分类。但是Hexo不支持指定多个同级分类。下面的指定方法：</p>
<pre><code>categories:
- Diary
- Life
会使分类Life成为Diary的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。</code></pre><h3 id="JSON-Front-matter"><a href="#JSON-Front-matter" class="headerlink" title="JSON Front-matter"></a>JSON Front-matter</h3><p>除了 YAML 外，你也可以使用 JSON 来编写 Front-matter，只要将 — 代换成 ;;; 即可</p>
<pre><code>&quot;title&quot;: &quot;Hello World&quot;,
&quot;date&quot;: &quot;2020/5/27 20:46:25&quot;
;;;</code></pre><h1 id="三、配置"><a href="#三、配置" class="headerlink" title="三、配置"></a>三、配置</h1><h2 id="在-config-yml-中修改大部份的配置"><a href="#在-config-yml-中修改大部份的配置" class="headerlink" title="在 _config.yml 中修改大部份的配置"></a>在 _config.yml 中修改大部份的配置</h2><pre><code>title        网站标题
subtitle    网站副标题
description    网站描述
author        您的名字
language    网站使用的语言
timezone    网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC</code></pre><p>其中，description 主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。author 参数用于主题显示文章的作者。）</p>
<pre><code>参数            描述            默认值
url            网址    
root            网站根目录    
permalink        文章的 永久链接 格式    :year/:month/:day/:title/
permalink_defaults    永久链接中各部分的默认值    
pretty_urls        改写 permalink 的值来美化 URL    
pretty_urls.trailing_index    是否在永久链接中保留尾部的 index.html，设置为 false 时去除    true
pretty_urls.trailing_html    是否在永久链接中保留尾部的 .html, 设置为 false 时去除 (对尾部的 index.html无效)    true</code></pre><p>比如，一个页面的永久链接是:<br><a href="http://example.com/foo/bar/index.html" target="_blank" rel="noopener">http://example.com/foo/bar/index.html</a></p>
<pre><code>pretty_urls:
    trailing_index: false</code></pre><p>此时页面的永久链接会变为：<br><a href="http://example.com/foo/bar/" target="_blank" rel="noopener">http://example.com/foo/bar/</a></p>
<p>如果网站存放在子目录中，例如 <a href="http://yoursite.com/blog，则将">http://yoursite.com/blog，则将</a> url 设为 <a href="http://yoursite.com/blog">http://yoursite.com/blog</a> 并把 root 设为 /blog/</p>
<h2 id="覆盖主题配置"><a href="#覆盖主题配置" class="headerlink" title="覆盖主题配置"></a>覆盖主题配置</h2><p>通常情况下，Hexo 主题是一个独立的项目，并拥有一个独立的 _config.yml 配置文件。</p>
<p>你可以在站点的 _config.yml 配置文件中配置你的主题，这样你就不需要 fork 一份主题并维护主题独立的配置文件。</p>
<p>以下是一个覆盖主题配置的例子：</p>
<pre><code># _config.yml
theme_config:
    bio: &quot;My awesome bio&quot;

# themes/my-theme/_config.yml
bio: &quot;Some generic bio&quot;
logo: &quot;a-cool-image.png&quot;</code></pre><p>最终主题配置的输出是：</p>
<pre><code>{
    bio: &quot;My awesome bio&quot;,
    logo: &quot;a-cool-image.png&quot;
}</code></pre><h1 id="四、指令"><a href="#四、指令" class="headerlink" title="四、指令"></a>四、指令</h1><h3 id="init————————–-gt"><a href="#init————————–-gt" class="headerlink" title="init————————–&gt;"></a>init————————–&gt;</h3><pre><code>hexo init [folder]
新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站</code></pre><h3 id="new————————–-gt"><a href="#new————————–-gt" class="headerlink" title="new————————–&gt;"></a>new————————–&gt;</h3><pre><code>hexo new [layout] &lt;title&gt;
新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来
例如：hexo new &quot;post title with whitespace&quot;

参数    描述
-p, --path    自定义新文章的路径
-r, --replace    如果存在同名文章，将其替换
-s, --slug    文章的 Slug，作为新文章的文件名和发布后的 URL
默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 index.md 文件。你可以使用 --path 参数来覆盖上述行为、自行决定文件的目录：

hexo new page --path about/me &quot;About me&quot;
以上命令会创建一个 source/about/me.md 文件，同时 Front Matter 中的 title 为 &quot;About me&quot;

注意！title 是必须指定的！如果你这么做并不能达到你的目的：

hexo new page --path about/me
此时 Hexo 会创建 source/_posts/about/me.md，同时 me.md 的 Front Matter 中的 title 为 &quot;page&quot;。这是因为在上述命令中，hexo-cli 将 page 视为指定文章的标题、并采用默认的 layout。</code></pre><h3 id="generate————————–-gt"><a href="#generate————————–-gt" class="headerlink" title="generate————————–&gt;"></a>generate————————–&gt;</h3><pre><code>hexo generate
生成静态文件
该命令可以简写为：    hexo g

选项    描述
-d, --deploy    文件生成后立即部署网站
-w, --watch    监视文件变动
-b, --bail    生成过程中如果发生任何未处理的异常则抛出异常
-f, --force    强制重新生成文件
        Hexo 引入了差分机制，如果 public 目录存在，那么 hexo g 只会重新生成改动的文件。
        使用该参数的效果接近 hexo clean &amp;&amp; hexo generate
-c, --concurrency    最大同时生成文件的数量，默认无限制</code></pre><h3 id="publish————————–-gt"><a href="#publish————————–-gt" class="headerlink" title="publish————————–&gt;"></a>publish————————–&gt;</h3><pre><code>hexo publish [layout] &lt;filename&gt;
发表草稿</code></pre><h3 id="server————————–-gt"><a href="#server————————–-gt" class="headerlink" title="server————————–&gt;"></a>server————————–&gt;</h3><pre><code>hexo server
启动服务器。默认情况下，访问网址为：http://localhost:4000/
该命令可以简写为：    hexo s

选项    描述
-p, --port    重设端口
-s, --static    只使用静态文件
-l, --log    启动日记记录，使用覆盖记录格式</code></pre><h3 id="deploy————————–-gt"><a href="#deploy————————–-gt" class="headerlink" title="deploy————————–&gt;"></a>deploy————————–&gt;</h3><pre><code>hexo deploy
部署网站
该命令可以简写为：    hexo d

参数    描述
-g, --generate    部署之前预先生成静态文件</code></pre><h3 id="render————————–-gt"><a href="#render————————–-gt" class="headerlink" title="render————————–&gt;"></a>render————————–&gt;</h3><pre><code>hexo render &lt;file1&gt; [file2] ...
渲染文件

参数    描述
-o, --output    设置输出路径</code></pre><h3 id="migrate————————–-gt"><a href="#migrate————————–-gt" class="headerlink" title="migrate————————–&gt;"></a>migrate————————–&gt;</h3><pre><code>hexo migrate &lt;type&gt;

从其他博客系统 迁移内容</code></pre><h3 id="clean————————–-gt"><a href="#clean————————–-gt" class="headerlink" title="clean————————–&gt;"></a>clean————————–&gt;</h3><pre><code>hexo clean

清除缓存文件 db.json 和已生成的静态文件 public


在某些情况(尤其是更换主题后)，如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令</code></pre><h3 id="list————————–-gt"><a href="#list————————–-gt" class="headerlink" title="list————————–&gt;"></a>list————————–&gt;</h3><pre><code>hexo list &lt;type&gt;

列出网站资料</code></pre><h3 id="version————————–-gt"><a href="#version————————–-gt" class="headerlink" title="version————————–&gt;"></a>version————————–&gt;</h3><pre><code>hexo version

显示 Hexo 版本</code></pre><h3 id="选项————————–-gt"><a href="#选项————————–-gt" class="headerlink" title="选项————————–&gt;"></a>选项————————–&gt;</h3><h4 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h4><pre><code>hexo --safe

在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行</code></pre><h4 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h4><pre><code>hexo --debug

在终端中显示调试信息并记录到 debug.log。当您碰到问题时，可以尝试用调试模式重新执行一次，并 提交调试信息到 GitHub</code></pre><h4 id="简洁模式"><a href="#简洁模式" class="headerlink" title="简洁模式"></a>简洁模式</h4><pre><code>hexo --silent
隐藏终端信息</code></pre><h4 id="自定义配置文件的路径"><a href="#自定义配置文件的路径" class="headerlink" title="自定义配置文件的路径"></a>自定义配置文件的路径</h4><pre><code>使用 custom.yml 代替默认的 _config.yml
hexo server --config custom.yml

使用 custom.yml 和 custom2.json，其中 custom2.json 优先级更高
hexo generate --config custom.yml,custom2.json,custom3.yml

自定义配置文件的路径，指定这个参数后将不再使用默认的 _config.yml。
可以使用一个 YAML 或 JSON 文件的路径，也可以使用逗号分隔（无空格）的多个 YAML 或 JSON 文件的路径。
例如：
    使用 custom.yml 代替默认的 _config.yml
    hexo server --config custom.yml

    使用 custom.yml, custom2.json 和 custom3.yml，其中 custom3.yml 优先级最高，其次是 custom2.json
    hexo generate --config custom.yml,custom2.json,custom3.yml

当指定了多个配置文件以后，Hexo 会按顺序将这部分配置文件合并成一个 _multiconfig.yml。如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。这个原则适用于任意数量、任意深度的 YAML 和 JSON 文件。</code></pre><h4 id="显示草稿"><a href="#显示草稿" class="headerlink" title="显示草稿"></a>显示草稿</h4><pre><code>hexo --draft
显示 source/_drafts 文件夹中的草稿文章</code></pre><h4 id="自定义-CWD"><a href="#自定义-CWD" class="headerlink" title="自定义 CWD"></a>自定义 CWD</h4><pre><code>hexo --cwd /path/to/cwd
自定义当前工作目录（Current working directory）的路径</code></pre>]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
